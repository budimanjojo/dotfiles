local lsp_installer = require('nvim-lsp-installer')

-- List of LSP I want to be installed
local requested_servers = {
  'ansiblels',
  'bashls',
  'cssls',
  'dockerls',
  {{ if not .headless -}}
  'gopls',
  {{ end -}}
  'jsonls',
  'pyright',
  'sumneko_lua',
  'yamlls'
}

-- Auto install requested LSP
for _, name in ipairs(requested_servers) do
  local server_available, requested_server = lsp_installer.get_server(name)
  if server_available then
    if not requested_server:is_installed() then
      print("Installing " .. name)
      requested_server:install()
    end
  end
end

-- Diagnostic looks
vim.diagnostic.config {
  virtual_text = false,
  update_in_insert = true,
  float = {
    source = 'if_many'
  }
}

-- Signcolumn symbols
local signs = { Error = ' ', Warn = ' ', Hint = ' ', Info = ' ' }
for type, icon in pairs(signs) do
  local hl = 'DiagnosticSign' .. type
  vim.fn.sign_define(hl, { text = icon, texthl = hl, numhl = hl })
end

-- Show diagnostics on hover
vim.o.updatetime = 150
vim.cmd([[autocmd CursorHold * lua vim.diagnostic.open_float(nil, { focusable = false })]])

-- LSP Server Setup Goes Below
local capabilities = require('cmp_nvim_lsp').update_capabilities(vim.lsp.protocol.make_client_capabilities())
local on_attach = function(_, bufnr)
  require 'lsp_signature'.on_attach()
  local keymap = vim.keymap
  local opts = { buffer = bufnr }

  keymap.set('n', 'rn', vim.lsp.buf.rename, opts)
  keymap.set('n', 'gd', vim.lsp.buf.definition, opts)
  keymap.set('n', 'gD', vim.lsp.buf.declaration, opts)
  keymap.set('n', 'gh', function() return require('utils').fix_buf_hover() end, opts)
  keymap.set('n', 'gr', vim.lsp.buf.references, opts)
  keymap.set('n', 'gi', vim.lsp.buf.implementation, opts)
end

local server_opts = {
  -- ansiblels
  ['ansiblels'] = function(opts)
    opts.filetypes = { 'yaml.ansible' }
  end,

  -- jsonls
  ['jsonls'] = function(opts)
    opts.settings = {
      json = {
        schemas = require('schemastore').json.schemas(),
      }
    }
  end,

  -- sumneko_lua
  ['sumneko_lua'] = function(opts)
    local runtime_path = vim.split(package.path, ';')
    opts.settings = {
      Lua = {
        runtime = {
          version = 'LuaJIT',
          path = runtime_path,
        },
        diagnostics = {
          globals = { 'vim' },
        },
        workspace = {
          library = vim.api.nvim_get_runtime_file('', true),
          preloadFileSize = 200,
        },
        telemetry = {
          enable = false,
        },
      }
    }
  end,

  -- yamlls
  ['yamlls'] = function(opts)
    opts.settings = {
      yaml = {
        customTags = {
          '!include_dir_list',
          '!include_dir_named',
          '!include_dir_merge_list',
          '!include_dir_merge_named',
          '!secret',
          '!env_var',
        },
        schemas = {
          kubernetes = {
            '01-namespace.yaml',
            'deployment.yaml',
            'daemonset.yaml',
            'statefulset.yaml',
            'service.yaml',
            'pv.yaml',
            'pvc.yaml',
            'configmap.yaml',
            'secret.yaml',
            'rbac.yaml',
            'crd.yaml',
            'storageclass.yaml',
            'cronjob.yaml'
          },
          ['https://raw.githubusercontent.com/docker/compose/master/compose/config/compose_spec.json'] = {
            'docker-compose.yml',
            'docker-compose.yaml'
          },
          ['https://json.schemastore.org/github-workflow'] = {
            '.github/workflows/**.yml',
            '.github/workflows/**.yaml'
          },
          ['https://json.schemastore.org/github-actions'] = {
            'action.yml',
            'action.yaml'
          },
          ['https://json.schemastore.org/gitlab-ci'] = '.gitlab-ci.yml',
          ['https://json.schemastore.org/kustomization'] = {
            'kustomization.yml',
            'kustomization.yaml'
          },
          ['https://json.schemastore.org/pre-commit-config'] = {
            '.pre-commit-config.yml',
            '.pre-commit-config.yaml',
          }
        }
      }
    }
  end,
}

lsp_installer.on_server_ready(function(server)
  -- default options
  local opts = {
    on_attach = on_attach,
    capabilities = capabilities,
  }

  if server_opts[server.name] then
    server_opts[server.name](opts)
  end

  server:setup(opts)
end)
