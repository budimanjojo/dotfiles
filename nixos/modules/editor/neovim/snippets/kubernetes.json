{
  "k8s ConfigMap": {
    "prefix": ["kcm", "k-cm", "kconfigmap", "k-configmap"],
    "description": "k8s ConfigMap",
    "body": [
      "---",
      "apiVersion: v1",
      "kind: ConfigMap",
      "metadata:",
      "  name: ${1:name}",
      "  labels:",
      "    app.kubernetes.io/name: ${1:name}",
      "data:",
      "  ${2:key}: ${3:value}$0"
    ]
  },

  "k8s Deployment": {
    "prefix": ["kdeploy", "k-deploy"],
    "description": "k8s Deployment",
    "body": [
      "---",
      "apiVersion: v1",
      "kind: Deployment",
      "metadata:",
      "  name: ${1:name}",
      "  labels: &labels",
      "    app.kubernetes.io/name: ${1:name}",
      "spec:",
      "  replicas: 1",
      "  strategy:",
      "    type: Recreate",
      "  selector:",
      "    matchLabels: *labels",
      "  template:",
      "    metadata:",
      "      labels: *labels",
      "  spec:",
      "    containers:",
      "      - name: ${1:name}",
      "        image: ${2:image}:${3:latest}",
      "        imagePullPolicy: ${4|IfNotPresent,Always,Never|}",
      "        resources:",
      "          requests:",
      "            cpu: ${5:100m}",
      "            memory: ${6:100Mi}",
      "          limits:",
      "            cpu: ${7:100m}",
      "            memory: ${8:100Mi}",
      "        ports:",
      "          - name: &port ${9:http}",
      "            protocol: TCP",
      "            containerPort: ${10:80}",
      "        volumeMounts:",
      "          - name: ${1:name}-config",
      "            mountPath: {11:/config}",
      "        startupProbe:",
      "          tcpSocket:",
      "            port: *port",
      "          initialDelaySeconds: 5",
      "          timeoutSeconds: 1",
      "          periodSeconds: 5",
      "          successThreshold: 1",
      "          failureThreshold: 30",
      "        livenessProbe:",
      "          tcpSocket:",
      "            port: *port",
      "          initialDelaySeconds: 5",
      "          timeoutSeconds: 1",
      "          periodSeconds: 10",
      "          successThreshold: 1",
      "          failureThreshold: 3",
      "        readinessProbe:",
      "          tcpSocket:",
      "            port: *port",
      "          initialDelaySeconds: 5",
      "          timeoutSeconds: 1",
      "          periodSeconds: 10",
      "          successThreshold: 1",
      "          failureThreshold: 3",
      "        env:",
      "          - name: ${12:TZ}",
      "            value: ${13:value}$0"
    ]
  },

  "k8s HelmRelease": {
    "prefix": ["khr", "k-hr", "khelmrelease", "k-helmrelease"],
    "description": "k8s HelmRelease",
    "body": [
      "---",
      "apiVersion: helm.toolkit.fluxcd.io/v2beta1",
      "kind: HelmRelease",
      "metadata:",
      "  name: ${1:name}",
      "spec:",
      "  interval: 15m",
      "  chart:",
      "    spec:",
      "      chart: ${2:chartName}",
      "      version: ${3:chartVersion}",
      "      sourceRef:",
      "        kind: HelmRepository",
      "        name: ${4:chartRepository}",
      "        namespace: flux-system",
      "      interval: 15m",
      "  install:",
      "    createNameSpace: true",
      "    remediation:",
      "      retries: 5",
      "  upgrade:",
      "    remediation:",
      "      retries: 5",
      "  values:",
      "    $0"
    ]
  },

  "k8s IngressRoute": {
    "prefix": ["kingressroute", "k-ingressroute"],
    "description": "k8s IngressRoute",
    "body": [
      "---",
      "apiVersion: traefik.containo.us/v1alpha1",
      "kind: IngressRoute",
      "metadata:",
      "  name: ${1:name}",
      "  labels:",
      "    app.kubernetes.io/name: ${1:name}",
      "spec:",
      "  entryPoints:",
      "    - ${2:websecure}",
      "  routes:",
      "    - kind: Rule",
      "      match: Host(`${3:mydomain.com}`)",
      "      middlewares:",
      "        - name: ${4:secure-headers}",
      "      services:",
      "        - name: ${1:name}",
      "          port: ${5:80}",
      "          namespace: ${6:default}",
      "      tls:",
      "        secretName: ${3/[\\.]/-/g}$0"
    ]
  },

  "k8s Flux Kustomization": {
    "prefix": ["kfluxtomization", "k-fluxtomization"],
    "description": "k8s Flux Kustomization",
    "body": [
      "---",
      "apiVersion: kustomize.toolkit.fluxcd.io/v1beta2",
      "kind: Kustomization",
      "metadata:",
      "  name: ${1:name}",
      "  namespace: ${2:flux-system}",
      "spec:",
      "  path: ./${3:cluster/}",
      "  sourceRef:",
      "    kind: GitRepository",
      "    name: flux-system",
      "  interval: 30m",
      "  prune: true",
      "  wait: true",
      "  $0"
    ]
  },

  "k8s Kustomization": {
    "prefix": ["kkustomization", "k-kustomization"],
    "description": "k8s Kustomization",
    "body": [
      "---",
      "apiVersion: kustomize.config.k8s.io/v1beta1",
      "kind: Kustomization",
      "namespace: ${2:default}",
      "resources:",
      "  - $0"
    ]
  },

  "k8s Namespace": {
    "prefix": ["knamespace", "k-namespace"],
    "description": "k8s Namespace",
    "body": [
      "---",
      "apiVersion: v1",
      "kind: Namespace",
      "metadata:",
      "  name: ${1:name}$0"
    ]
  },

  "k8s PersistentVolumeClaim": {
    "prefix": ["kpvc", "k-pvc"],
    "description": "k8s PersistentVolumeClaim",
    "body": [
      "---",
      "apiVersion: v1",
      "kind: PersistentVolumeClaim",
      "metadata:",
      "  name: ${1:name}",
      "  labels:",
      "    app.kubernetes.io/name: ${1:name}",
      "spec:",
      "  accessModes:",
      "    - ${2|ReadWriteOnce,ReadWriteMany,ReadOnlyMany|}",
      "  resources:",
      "    requests:",
      "      storage: ${3:1Gi}",
      "  storageClassName: ${4|rook-ceph-block,nfs-provisioner,default|}$0"
    ]
  },

  "k8s ReplicationSource Restic": {
    "prefix": ["kreplicationsource", "k-replicationsource"],
    "description": "k8s ReplicationSource Restic",
    "body": [
      "---",
      "apiVersion: volsync.backube/v1alpha1",
      "kind: ReplicationSource",
      "metadata:",
      "  name: ${1:name}",
      "spec:",
      "  sourcePVC: ${2:app-config}",
      "  trigger:",
      "    schedule: 0 0 * * *",
      "  restic:",
      "    copyMethod: ${3|Snapshot,Clone,Direct|}",
      "    pruneIntervalDays: ${4:10}",
      "    repository: ${5:app}-restic-secret",
      "    volumeSnapShotClassName: ${6|rook-ceph-block,nfs-provisioner,default|}",
      "    storageClassName: ${7|rook-ceph-block,nfs-provisioner,default|}",
      "    retain:",
      "      daily: ${8:10}",
      "      within: ${9:3d}$0"
    ]
  },

  "k8s Secret": {
    "prefix": ["ksecret", "k-secret"],
    "description": "k8s Secret",
    "body": [
      "---",
      "apiVersion: v1",
      "kind: Secret",
      "metadata:",
      "  name: ${1:name}-secret",
      "  labels:",
      "    app.kubernetes.io/name: ${1:name}",
      "type: Opaque",
      "stringData:",
      "  $0"
    ]
  },

  "k8s Service": {
    "prefix": ["kservice", "k-service"],
    "description": "k8s Service",
    "body": [
      "---",
      "apiVersion: v1",
      "kind: Service",
      "metadata:",
      "  name: ${1:name}",
      "  labels: &labels",
      "    app.kubernetes.io/name: ${1:name}",
      "spec:",
      "  selector: *labels",
      "  ports:",
      "    - name: ${2:http}",
      "      protocol: TCP",
      "      port: ${3:80}",
      "      targetPort: ${4:http}",
      "  type: ClusterIP$0"
    ]
  }
}
